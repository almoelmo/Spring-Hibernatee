package org.example.accounting.dao;

import org.example.accounting.model.Accounting;
import org.example.accounting.utils.AccountingRowMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.DatabaseMetaData;
import java.util.List;

@Repository
public class AccountingDaoJdbc implements AccountingDao{

    private JdbcTemplate template = new JdbcTemplate(h2DataSource());
    private boolean create = true;

    public DataSource h2DataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("org.h2.Driver");
        dataSource.setUrl("jdbc:h2:file:./car");
        dataSource.setUsername("user");
        dataSource.setPassword("user");
        return dataSource;
    }

    @Override
    public Accounting findById(long id) {
        if(create){
            createTable();
        }
        String query = "select * from accounting where id=?";
        return template.queryForObject(
                query, new Object[] {id}, new AccountingRowMapper());
    }

    private void createTable() {
        template.execute("create table if not exists accounting (id bigint generated by default as identity," +
                "brand varchar(255), generation varchar(255), model varchar(255), birthday timestamp(6)," +
                "first_name varchar(255), last_name varchar(255), second_name varchar(255)," +
                "pts bigint not null, pts_date timestamp(6), reg_number varchar(255), release_year integer," +
                " sts bigint not null, sts_date timestamp(6), primary key (id));");
        create = false;
    }

    @Override
    public void save(Accounting accounting) {
        if(create){
            createTable();
        }
        template.update("insert into accounting" +
                        "(brand, generation, model, release_year, " +
                        "birthday, first_name, last_name, second_name, pts, pts_date," +
                        "reg_number, sts, sts_date) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                accounting.getCar().getBrand(),
                accounting.getCar().getGeneration(),
                accounting.getCar().getModel(),
                accounting.getReleaseYear(),
                accounting.getOwner().getBirthday(),
                accounting.getOwner().getFirstName(),
                accounting.getOwner().getLastName(),
                accounting.getOwner().getSecondName(),
                accounting.getPts(),
                accounting.getPtsDate(),
                accounting.getRegNumber(),
                accounting.getSts(),
                accounting.getStsDate());
    }

    @Override
    public void update(Accounting accounting) {
        if(create){
            createTable();
        }
        template.update("update accounting set " +
                        "brand = ?, generation = ?, model = ?, release_year = ?, " +
                        "birthday = ?, first_name = ?, last_name = ?, second_name = ?, pts = ?, pts_date = ?," +
                        "reg_number = ?, sts = ?, sts_date = ? where id = ?",
                        accounting.getCar().getBrand(),
                        accounting.getCar().getGeneration(),
                        accounting.getCar().getModel(),
                        accounting.getReleaseYear(),
                        accounting.getOwner().getBirthday(),
                        accounting.getOwner().getFirstName(),
                        accounting.getOwner().getLastName(),
                        accounting.getOwner().getSecondName(),
                        accounting.getPts(),
                        accounting.getPtsDate(),
                        accounting.getRegNumber(),
                        accounting.getSts(),
                        accounting.getStsDate(),
                        accounting.getId());
    }

    @Override
    public void delete(Accounting accounting) {
        if(create){
            createTable();
        }
        template.update("delete from accounting where id=?", accounting.getId());
    }

    @Override
    public List<Accounting> findAll() {
        if(create){
            createTable();
        }
        return template.query("select * from accounting", new AccountingRowMapper());
    }
}
